import java.util.*;

public class Puzzle{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        List<Integer> list=new ArrayList<>();
        int i=0;
        while (n>0){
            int op = sc.nextInt();
            int stick = sc.nextInt();
            if(op == 1){
                list.add(stick);
                judgeGraph(list);
            }
            if(!list.isEmpty()&& op == 2 && list.contains(stick)){
                int index = list.indexOf(stick);
                list.remove(index);
                judgeGraph(list);
            }
            n--;
        }
    }
 
    private static void judgeGraph(List<Integer> list) {
        //少于三根的无法组成任何封闭的图形
        if(list.isEmpty()||list.size()<3){
            System.out.println("No");
            return;
        }
        int sum=0;
        int max = list.get(0);
        //将最大的边给max 
        //对于三角形 判断其他边之和是否大于最大边
        for(int i=0;i<list.size();i++){
            int temp = list.get(i);
            sum+=temp;
            if(temp>max){
                max=temp;
            }
        }
        if(max<sum-max){
            System.out.println("Yes");
        }
        else{
            System.out.println("No");
        }
    }
}
