public class InsertionSort{
    public static void insertSortV1(int[] array) {
        for (int i = 0; i < array.length - 1; i++){
            //有序区间   [0,i]
            // 无序区间		[i + 1, array.length)
            // 待插入的数据是 array[i + 1]
            // 插入过程在有序区间内查找

            int key = array[i + 1];
            int j;
            for (j = i; j >= 0; j--) {
                if(key >= array[j]) {
                    break;
                }
            }
            //j + 1 放key的位置
            for (int k = i;k > j; k--) {
                array[k + 1] = array[k];
            }
            array[j + 1] = key;
        }
    }
    public static void insertSort(int[] array) {
        for (int i = 0; i < array.length-1; i++) {
            int key = array[i + 1];
            int j;
            for(j = i; j >= 0 && key < array[j]; j--) {
                array[j + 1] = array[j];
            }
            array[j + 1] = key;
        }
    }
    
    //插入排序的基本实现
    public static void insertionSort(int[] array){
        if (array == null || array.length < 2){
            return;
        }
        //假定第一项是有序的  从第二项开始进行插入排序
        for (int i = 1; i < array.length; i++){
            int cur = array[i]; //当前待排序元素
            //判断当前的待排序元素是否为最小的
            boolean flag = true;
            for (int j = i - 1; j >= 0; j--){
                //倒序遍历有序数组 并将大于cur的元素向后移 直到array[j]比cur小 将cur 插到j后面
                if (array[j] > cur){
                    array[j + 1] = array[j];
                } else {
                    array[j + 1] = cur;
                    flag = false;
                    break;
                }
            }
            //cur为最小 插入数组首部
            if (flag){
                array[0] = cur;
            }
        }
    }

    public static void main(String[] args){
        //int[] array = {89, 45, 68, 90, 29, 34, 17};
        int[] array = {12,3,2,7,4,1,8,6,9};
        insertionSort(array);
        System.out.println(Arrays.toString(array));
    }
}
